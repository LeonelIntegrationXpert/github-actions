#################################################################################################
# MuleSoft CI/CD Pipeline - GitHub Actions Workflow
#################################################################################################
# Projeto   : github-actions
# Autor     : Leonel Dorneles Porto
# Email     : leoneldornelesporto@outlook.com.br
# Telefone  : +55 53 99180-4869
#################################################################################################
# Descrição :
#   - Pipeline de CI/CD para aplicações MuleSoft 4.x, utilizando GitHub Actions.
#   - Automatiza build, testes, Exchange, e CloudHub 2.0, com versionamento consistente.
#################################################################################################

name: Publish to Exchange & Deploy to CH2.0

on:
  push:
    branches: 
      - dev
      - qa
      - prod
      - main

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      #########################################################################
      # Passo 1: Checkout de todas as branches com histórico completo
      #########################################################################
      - name: 📥 Checkout do repositório completo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # necessário para múltiplas branches e merge

      #########################################################################
      # Passo 2: Configurar JDK 17
      #########################################################################
      - name: ☕ Setup JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: "zulu"
          java-version: 17

      #########################################################################
      # Passo 3: Incrementar a versão uma vez e propagar a mesma para todas as branches
      #########################################################################
      - name: 🔖 Incrementar versão do pom.xml e propagar
        run: |
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "🚀 Início do incremento de versão e propagação"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"

          BRANCHES="dev qa prod main"

          echo "🔍 Buscando versão base no pom.xml..."
          git checkout dev
          git pull origin dev

          BASE_VERSION=$(grep -m 1 '<version>' pom.xml | sed -E 's/.*<version>(.*)<\/version>.*/\1/')
          
          echo "📌 Versão base detectada: $BASE_VERSION"

          IFS='.' read -r MAJOR MINOR PATCH <<< "$BASE_VERSION"

          # Incrementa apenas UMA vez
          NEW_PATCH=$((PATCH + 1))
          NEW_VERSION="${MAJOR}.${MINOR}.${NEW_PATCH}"

          echo "🚀 Nova versão: $NEW_VERSION"
          
          # Atualiza POM em dev primeiro
          sed -i "0,/<version>.*<\/version>/s//<version>${NEW_VERSION}<\/version>/" pom.xml
          grep -m 1 '<version>' pom.xml

          git config user.name "github-actions"
          git config user.email "github-actions@github.com"

          git add pom.xml
          git commit -m "🔖 Bump version to $NEW_VERSION [automated by CI/CD]"
          git push origin dev

          # Propaga a MESMA versão para as outras branches
          for BRANCH in qa prod main
          do
            echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
            echo "🌿 Processando branch: $BRANCH"
            echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"

            git fetch origin $BRANCH
            git checkout $BRANCH || git checkout -b $BRANCH origin/$BRANCH
            git pull origin $BRANCH

            # Atualiza versão no POM (com o MESMO valor)
            sed -i "0,/<version>.*<\/version>/s//<version>${NEW_VERSION}<\/version>/" pom.xml
            grep -m 1 '<version>' pom.xml

            git add pom.xml
            git commit -m "🔖 Bump version to $NEW_VERSION [automated by CI/CD]"
            git push origin $BRANCH

            echo "✅ Atualização concluída na branch: $BRANCH"
          done

          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "✅ Todas as branches foram atualizadas com sucesso para a versão: $NEW_VERSION"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"

      #########################################################################
      # Passo 4: Cache Maven dependencies
      #########################################################################
      - name: 📦 Cache Maven dependencies
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-maven-

      #########################################################################
      # Passo 5: Publicação no Anypoint Exchange
      #########################################################################
      - name: 🚀 Publicar no Anypoint Exchange
        run: |
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "🌎 Publicando no Anypoint Exchange"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"

          echo "📂 Ambiente detectado: $GITHUB_REF_NAME"
          
          mvn deploy --settings .maven/settings.xml -P $GITHUB_REF_NAME -DskipMunitTests \
            -Dclient.id="${{ secrets.CONNECTED_APP_CLIENT_ID }}" \
            -Dclient.secret="${{ secrets.CONNECTED_APP_CLIENT_SECRET }}"

          echo "✅ Publicação no Exchange concluída com sucesso!"

      #########################################################################
      # Passo 6: Deploy no CloudHub 2.0
      #########################################################################
      - name: ☁️ Deploy no CloudHub 2.0
        run: |
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "☁️ Iniciando o deploy no CloudHub 2.0"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"

          echo "📂 Ambiente detectado: $GITHUB_REF_NAME"

          mvn deploy --settings .maven/settings.xml -P $GITHUB_REF_NAME -DskipMunitTests -DmuleDeploy \
            -Dclient.id="${{ secrets.CONNECTED_APP_CLIENT_ID }}" \
            -Dclient.secret="${{ secrets.CONNECTED_APP_CLIENT_SECRET }}"

          echo "✅ Deploy no CloudHub 2.0 realizado com sucesso!"
