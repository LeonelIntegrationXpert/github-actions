name: Publish to Exchange & Deploy to CH2.0

on:
  push:
    branches: 
      - dev
      - qa
      - prod
      - main

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # Passo 1: Checkout de todas as branches
      - name: 📥 Checkout do repositório completo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # importante para pegar todas as branches

      # Passo 2: Configurar JDK 17
      - name: ☕ Setup JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: "zulu"
          java-version: 17

      # Passo 3: Incrementar versão no main
      - name: 🔖 Incrementa versão no main
        run: |
          git checkout main
          git pull origin main

          echo "🔍 Pegando versão atual do pom.xml (main)..."
          VERSION=$(grep -m 1 '<version>' pom.xml | sed -E 's/.*<version>(.*)<\/version>.*/\1/')
          echo "📌 Versão atual: $VERSION"

          IFS='.' read -r MAJOR MINOR PATCH <<< "$VERSION"
          NEW_PATCH=$((PATCH + 1))
          NEW_VERSION="${MAJOR}.${MINOR}.${NEW_PATCH}"

          echo "🚀 Nova versão: $NEW_VERSION"

          sed -i "0,/<version>.*<\/version>/s//<version>${NEW_VERSION}<\/version>/" pom.xml

          git config user.name "github-actions"
          git config user.email "github-actions@github.com"

          git add pom.xml
          git commit -m "🔖 Bump version to $NEW_VERSION [ci skip]"
          git push origin main

      # Passo 4: Sincroniza a versão para dev, qa e prod
      - name: 🔄 Propagar versão para dev, qa, prod
        run: |
          for BRANCH in dev qa prod
          do
            echo "🌿 Processando branch $BRANCH"
            git checkout $BRANCH
            git pull origin $BRANCH
            git merge main --no-edit
            git push origin $BRANCH
          done

      # Passo 5: Cache Maven (opcional)
      - name: 📦 Cache Maven dependencies
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-maven-

      # Passo 6: Deploy para o ambiente detectado
      - name: 🚀 Publicar no Anypoint Exchange
        run: |
          echo "🌎 Ambiente detectado: $GITHUB_REF_NAME"
          mvn deploy --settings .maven/settings.xml -P $GITHUB_REF_NAME -DskipMunitTests \
            -Dclient.id="${{ secrets.CONNECTED_APP_CLIENT_ID }}" \
            -Dclient.secret="${{ secrets.CONNECTED_APP_CLIENT_SECRET }}"

      # Passo 7: Deploy no CloudHub 2.0
      - name: ☁️ Deploy no CloudHub 2.0
        run: |
          echo "🌎 Ambiente detectado: $GITHUB_REF_NAME"
          mvn deploy --settings .maven/settings.xml -P $GITHUB_REF_NAME -DskipMunitTests -DmuleDeploy \
            -Dclient.id="${{ secrets.CONNECTED_APP_CLIENT_ID }}" \
            -Dclient.secret="${{ secrets.CONNECTED_APP_CLIENT_SECRET }}"
