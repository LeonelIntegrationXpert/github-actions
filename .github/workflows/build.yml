#################################################################################################
# MuleSoft CI/CD Pipeline - GitHub Actions Workflow
#################################################################################################
# Projeto   : github-actions
# Autor     : Leonel Dorneles Porto
# Email     : leoneldornelesporto@outlook.com.br
# Telefone  : +55 53 99180-4869
#################################################################################################
# Descrição :
#   - Pipeline de CI/CD para aplicações MuleSoft 4.x, utilizando GitHub Actions.
#   - Automatiza o processo de build, testes MUnit, publicação no Anypoint Exchange
#     e deploy no CloudHub 2.0.
#   - Inclui incremento automático de versão no pom.xml (sem necessidade de intervenção manual).
#
#################################################################################################
# Funcionalidades :
#   ✅ Build e package da aplicação MuleSoft
#   ✅ Execução de testes MUnit com cobertura de código (opcional)
#   ✅ Publicação de assets no Anypoint Exchange
#   ✅ Deploy automático no CloudHub 2.0 com Rolling Updates e OSv2
#   ✅ Controle de variáveis e segredos via GitHub Secrets
#   ✅ Incremento automático da versão no pom.xml (exemplo: 1.0.0 -> 1.0.1)
#
#################################################################################################
# Documentação oficial MuleSoft:
#   https://docs.mulesoft.com/mule-runtime/4.4/
# GitHub Actions - Quickstart:
#   https://docs.github.com/pt/actions/writing-workflows/quickstart
# Video referência - Alex Martinez (ProstDev):
#   https://www.youtube.com/watch?v=hfQaYcjUB9c
#################################################################################################

name: Publish to Exchange & Deploy to CH2.0

on:
  push:
    branches: 
      - dev
      - qa
      - prod
      - main  # Inclui se quiser deploy em outras branches também

permissions:
  contents: write  # 🔓 Permissão necessária para modificar arquivos (ex: pom.xml) e fazer commits

jobs:
  build:
    runs-on: ubuntu-latest  # 🖥️ Ambiente de execução no GitHub Actions

    steps:
      # 📌 Passo 1: Fazer o checkout do repositório
      - name: 📥 Checkout do repositório
        uses: actions/checkout@v4

      # 📌 Passo 2: Cache de dependências Maven
      - name: 📦 Cache Maven dependencies
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-maven-

      # 📌 Passo 3: Configurar JDK 8
      - name: ☕ Setup JDK 8
        uses: actions/setup-java@v4
        with:
          distribution: "zulu"
          java-version: 8

      # 📌 Passo 4: Incrementar versão automaticamente no pom.xml
      - name: 🔖 Incrementar versão do pom.xml
        run: |
          echo "🔍 Pegando versão do pom.xml..."
          VERSION=$(grep -m 1 '<version>' pom.xml | sed -E 's/.*<version>(.*)<\/version>.*/\1/')
          
          echo "📌 Versão atual: $VERSION"

          IFS='.' read -r MAJOR MINOR PATCH <<< "$VERSION"

          NEW_PATCH=$((PATCH + 1))
          NEW_VERSION="${MAJOR}.${MINOR}.${NEW_PATCH}"

          echo "🚀 Nova versão: $NEW_VERSION"

          sed -i "0,/<version>.*<\/version>/s//<version>${NEW_VERSION}<\/version>/" pom.xml

          grep -m 1 '<version>' pom.xml

          git config user.name "github-actions"
          git config user.email "github-actions@github.com"

          git add pom.xml
          git commit -m "🔖 Bump version to $NEW_VERSION"

          # 🔄 Faz pull com rebase para evitar conflitos antes de empurrar
          git pull --rebase origin $GITHUB_REF_NAME
          
          # 🚀 Push automático para a branch atual
          git push origin $GITHUB_REF_NAME

      # 📌 Passo 5: Publicação no Anypoint Exchange
      - name: 🚀 Publicar no Anypoint Exchange
        run: |
          echo "🌎 Ambiente detectado: $GITHUB_REF_NAME"
          mvn deploy --settings .maven/settings.xml -P $GITHUB_REF_NAME -DskipMunitTests \
            -Dclient.id="${{ secrets.CONNECTED_APP_CLIENT_ID }}" \
            -Dclient.secret="${{ secrets.CONNECTED_APP_CLIENT_SECRET }}"

      # 📌 Passo 6: Deploy no CloudHub 2.0
      - name: ☁️ Deploy no CloudHub 2.0
        run: |
          echo "🌎 Ambiente detectado: $GITHUB_REF_NAME"
          mvn deploy --settings .maven/settings.xml -P $GITHUB_REF_NAME -DskipMunitTests -DmuleDeploy \
            -Dclient.id="${{ secrets.CONNECTED_APP_CLIENT_ID }}" \
            -Dclient.secret="${{ secrets.CONNECTED_APP_CLIENT_SECRET }}"
