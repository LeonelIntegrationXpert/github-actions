name: Publish to Exchange & Deploy to CH2.0

on:
  push:
    branches: 
      - dev
      - qa
      - prod
      - main

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # Passo 1: Checkout de todas as branches com hist√≥rico completo
      - name: üì• Checkout do reposit√≥rio completo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # necess√°rio para m√∫ltiplas branches e merge

      # Passo 2: Configurar JDK 17
      - name: ‚òï Setup JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: "zulu"
          java-version: 17

      # Passo 3: Garantir a branch atual sincronizada
      - name: üîÑ Sincronizar a branch atual
        run: |
          echo "üåø Branch atual detectada: $GITHUB_REF_NAME"

          git fetch origin $GITHUB_REF_NAME
          git checkout $GITHUB_REF_NAME || git checkout -b $GITHUB_REF_NAME origin/$GITHUB_REF_NAME
          git pull origin $GITHUB_REF_NAME

      # Passo 4: Incrementar vers√£o do pom.xml na branch atual
      - name: üîñ Incrementar vers√£o do pom.xml na branch atual
        run: |
          echo "üîç Pegando vers√£o do pom.xml..."
          VERSION=$(grep -m 1 '<version>' pom.xml | sed -E 's/.*<version>(.*)<\/version>.*/\1/')
          
          echo "üìå Vers√£o atual: $VERSION"

          IFS='.' read -r MAJOR MINOR PATCH <<< "$VERSION"

          NEW_PATCH=$((PATCH + 1))
          NEW_VERSION="${MAJOR}.${MINOR}.${NEW_PATCH}"

          echo "üöÄ Nova vers√£o: $NEW_VERSION"

          sed -i "0,/<version>.*<\/version>/s//<version>${NEW_VERSION}<\/version>/" pom.xml

          grep -m 1 '<version>' pom.xml

          git config user.name "github-actions"
          git config user.email "github-actions@github.com"

          git add pom.xml
          git commit -m "üîñ Bump version to $NEW_VERSION"

          git push origin $GITHUB_REF_NAME

      # Passo 5: Propagar vers√£o para as demais branches (sem conflitos)
      - name: üîÑ Propagar vers√£o para as demais branches
        run: |
          echo "üåø Branch de origem: $GITHUB_REF_NAME"

          # Define as branches que receber√£o o merge
          TARGET_BRANCHES="dev qa prod main"

          # Remove a branch atual da lista para n√£o repetir merge nela
          PROPAGATE_BRANCHES=$(echo $TARGET_BRANCHES | sed "s/\b$GITHUB_REF_NAME\b//g")

          for BRANCH in $PROPAGATE_BRANCHES
          do
            echo "üöÄ Propagando vers√£o para a branch $BRANCH"

            git fetch origin $BRANCH
            git checkout $BRANCH || git checkout -b $BRANCH origin/$BRANCH
            git pull origin $BRANCH

            # Merge com prefer√™ncia para as altera√ß√µes da branch origem (para evitar conflitos)
            git merge -X theirs $GITHUB_REF_NAME --no-edit || true

            git push origin $BRANCH
          done

      # Passo 6: Cache Maven dependencies
      - name: üì¶ Cache Maven dependencies
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-maven-

      # Passo 7: Publica√ß√£o no Anypoint Exchange
      - name: üöÄ Publicar no Anypoint Exchange
        run: |
          echo "üåé Ambiente detectado: $GITHUB_REF_NAME"
          mvn deploy --settings .maven/settings.xml -P $GITHUB_REF_NAME -DskipMunitTests \
            -Dclient.id="${{ secrets.CONNECTED_APP_CLIENT_ID }}" \
            -Dclient.secret="${{ secrets.CONNECTED_APP_CLIENT_SECRET }}"

      # Passo 8: Deploy no CloudHub 2.0
      - name: ‚òÅÔ∏è Deploy no CloudHub 2.0
        run: |
          echo "üåé Ambiente detectado: $GITHUB_REF_NAME"
          mvn deploy --settings .maven/settings.xml -P $GITHUB_REF_NAME -DskipMunitTests -DmuleDeploy \
            -Dclient.id="${{ secrets.CONNECTED_APP_CLIENT_ID }}" \
            -Dclient.secret="${{ secrets.CONNECTED_APP_CLIENT_SECRET }}"
