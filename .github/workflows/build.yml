#################################################################################################
# MuleSoft CI/CD Pipeline - GitHub Actions Workflow
#################################################################################################
# Projeto   : github-actions
# Autor     : Leonel Dorneles Porto
# Email     : leoneldornelesporto@outlook.com.br
# Telefone  : +55 53 99180-4869
#################################################################################################
# Descrição :
#   - Pipeline de CI/CD para MuleSoft com deploy no CloudHub 2.0 e publicação no Exchange.
#################################################################################################

name: Publish to Exchange & Deploy to CH2.0

on:
  push:
    branches: 
      - dev
      - qa
      - prod

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      #########################################################################
      # Passo 1: Checkout do repositório
      #########################################################################
      - name: 📥 Checkout do repositório
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # necessário para obter todo o histórico da branch

      #########################################################################
      # Passo 2: Configurar JDK 17
      #########################################################################
      - name: ☕ Configurando JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: "zulu"
          java-version: 17

      #########################################################################
      # Passo 3: Incrementar a versão do projeto na branch atual
      #########################################################################
      - name: 🔖 Incrementar versão do pom.xml (apenas branch atual)
        run: |
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "🚀 Início do incremento de versão"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"

          BRANCH_ATUAL=$GITHUB_REF_NAME
          echo "🌿 Branch atual: $BRANCH_ATUAL"

          git fetch origin $BRANCH_ATUAL
          git checkout $BRANCH_ATUAL || git checkout -b $BRANCH_ATUAL origin/$BRANCH_ATUAL
          git pull origin $BRANCH_ATUAL

          echo "🔍 Buscando versão atual no pom.xml"
          VERSAO_ATUAL=$(grep -m 1 '<version>' pom.xml | sed -E 's/.*<version>(.*)<\/version>.*/\1/')
          echo "📌 Versão atual: $VERSAO_ATUAL"

          IFS='.' read -r MAJOR MINOR PATCH <<< "$VERSAO_ATUAL"
          NOVO_PATCH=$((PATCH + 1))
          NOVA_VERSAO="${MAJOR}.${MINOR}.${NOVO_PATCH}"
          echo "🚀 Nova versão: $NOVA_VERSAO"

          sed -i "0,/<version>.*<\/version>/s//<version>${NOVA_VERSAO}<\/version>/" pom.xml
          echo "🔖 Versão atualizada no pom.xml"

          git config user.name "github-actions"
          git config user.email "github-actions@github.com"

          git add pom.xml
          git commit -m "🔖 Bump version to $NOVA_VERSAO [automated by CI/CD]"
          git push origin $BRANCH_ATUAL

          echo "✅ Versão $NOVA_VERSAO publicada na branch $BRANCH_ATUAL"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"

      #########################################################################
      # Passo 4: Cache das dependências Maven
      #########################################################################
      - name: 📦 Cache de dependências Maven
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-maven-

      #########################################################################
      # Passo 5: Publicação no Anypoint Exchange
      #########################################################################
      - name: 🚀 Publicar no Anypoint Exchange
        run: |
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "🌎 Publicando no Anypoint Exchange - Ambiente: $GITHUB_REF_NAME"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"

          mvn deploy --settings .maven/settings.xml -P $GITHUB_REF_NAME -DskipMunitTests \
            -Dclient.id="${{ secrets.CONNECTED_APP_CLIENT_ID }}" \
            -Dclient.secret="${{ secrets.CONNECTED_APP_CLIENT_SECRET }}"

          echo "✅ Publicação no Exchange concluída!"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"

      #########################################################################
      # Passo 6: Deploy no CloudHub 2.0
      #########################################################################
      - name: ☁️ Deploy no CloudHub 2.0
        run: |
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "☁️ Iniciando deploy no CloudHub 2.0 - Ambiente: $GITHUB_REF_NAME"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"

          mvn deploy --settings .maven/settings.xml -P $GITHUB_REF_NAME -DskipMunitTests -DmuleDeploy \
            -Dclient.id="${{ secrets.CONNECTED_APP_CLIENT_ID }}" \
            -Dclient.secret="${{ secrets.CONNECTED_APP_CLIENT_SECRET }}"

          echo "✅ Deploy no CloudHub 2.0 concluído com sucesso!"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
